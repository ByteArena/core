// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package deathmatch

import (
	json "encoding/json"
	types "github.com/bytearena/core/common/types"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson69d6c65dDecodeGithubComBytearenaCoreGameDeathmatch(in *jlexer.Lexer, out *gunSpecs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "shootcost":
			out.ShootCost = float64(in.Float64())
		case "shootcooldown":
			out.ShootCooldown = int(in.Int())
		case "projectilespeed":
			out.ProjectileSpeed = float64(in.Float64())
		case "projectiledamage":
			out.ProjectileDamage = float64(in.Float64())
		case "projectilerange":
			out.ProjectileRange = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69d6c65dEncodeGithubComBytearenaCoreGameDeathmatch(out *jwriter.Writer, in gunSpecs) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"shootcost\":")
	out.Float64(float64(in.ShootCost))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"shootcooldown\":")
	out.Int(int(in.ShootCooldown))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"projectilespeed\":")
	out.Float64(float64(in.ProjectileSpeed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"projectiledamage\":")
	out.Float64(float64(in.ProjectileDamage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"projectilerange\":")
	out.Float64(float64(in.ProjectileRange))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v gunSpecs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69d6c65dEncodeGithubComBytearenaCoreGameDeathmatch(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v gunSpecs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69d6c65dEncodeGithubComBytearenaCoreGameDeathmatch(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *gunSpecs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69d6c65dDecodeGithubComBytearenaCoreGameDeathmatch(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *gunSpecs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69d6c65dDecodeGithubComBytearenaCoreGameDeathmatch(l, v)
}
func easyjson69d6c65dDecodeGithubComBytearenaCoreGameDeathmatch1(in *jlexer.Lexer, out *agentSpecs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "maxspeed":
			out.MaxSpeed = float64(in.Float64())
		case "maxsteeringforce":
			out.MaxSteeringForce = float64(in.Float64())
		case "maxangularvelocity":
			out.MaxAngularVelocity = float64(in.Float64())
		case "visionradius":
			out.VisionRadius = float64(in.Float64())
		case "visionangle":
			out.VisionAngle = types.Angle(in.Float64())
		case "bodyradius":
			out.BodyRadius = float64(in.Float64())
		case "maxshootenergy":
			out.MaxShootEnergy = float64(in.Float64())
		case "shootrecoveryrate":
			out.ShootRecoveryRate = float64(in.Float64())
		case "gear":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Gear = make(map[string]agentGearSpecs)
				} else {
					out.Gear = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 agentGearSpecs
					(v1).UnmarshalEasyJSON(in)
					(out.Gear)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69d6c65dEncodeGithubComBytearenaCoreGameDeathmatch1(out *jwriter.Writer, in agentSpecs) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"maxspeed\":")
	out.Float64(float64(in.MaxSpeed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"maxsteeringforce\":")
	out.Float64(float64(in.MaxSteeringForce))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"maxangularvelocity\":")
	out.Float64(float64(in.MaxAngularVelocity))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visionradius\":")
	out.Float64(float64(in.VisionRadius))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visionangle\":")
	out.Float64(float64(in.VisionAngle))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bodyradius\":")
	out.Float64(float64(in.BodyRadius))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"maxshootenergy\":")
	out.Float64(float64(in.MaxShootEnergy))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"shootrecoveryrate\":")
	out.Float64(float64(in.ShootRecoveryRate))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gear\":")
	if in.Gear == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in.Gear {
			if !v2First {
				out.RawByte(',')
			}
			v2First = false
			out.String(string(v2Name))
			out.RawByte(':')
			(v2Value).MarshalEasyJSON(out)
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v agentSpecs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69d6c65dEncodeGithubComBytearenaCoreGameDeathmatch1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v agentSpecs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69d6c65dEncodeGithubComBytearenaCoreGameDeathmatch1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *agentSpecs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69d6c65dDecodeGithubComBytearenaCoreGameDeathmatch1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *agentSpecs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69d6c65dDecodeGithubComBytearenaCoreGameDeathmatch1(l, v)
}
func easyjson69d6c65dDecodeGithubComBytearenaCoreGameDeathmatch2(in *jlexer.Lexer, out *agentGearSpecs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "genre":
			out.Genre = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "specs":
			if m, ok := out.Specs.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Specs.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Specs = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69d6c65dEncodeGithubComBytearenaCoreGameDeathmatch2(out *jwriter.Writer, in agentGearSpecs) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"genre\":")
	out.String(string(in.Genre))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"kind\":")
	out.String(string(in.Kind))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"specs\":")
	if m, ok := in.Specs.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.Specs.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.Specs))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v agentGearSpecs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69d6c65dEncodeGithubComBytearenaCoreGameDeathmatch2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v agentGearSpecs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69d6c65dEncodeGithubComBytearenaCoreGameDeathmatch2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *agentGearSpecs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69d6c65dDecodeGithubComBytearenaCoreGameDeathmatch2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *agentGearSpecs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69d6c65dDecodeGithubComBytearenaCoreGameDeathmatch2(l, v)
}
