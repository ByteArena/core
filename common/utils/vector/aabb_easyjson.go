// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package vector

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC321af92DecodeGithubComBytearenaBytearenaCommonUtilsVector(in *jlexer.Lexer, out *AABB) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LowerBound":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v1 := 0
				for !in.IsDelim(']') {
					if v1 < 2 {
						out.LowerBound[v1] = float64(in.Float64())
						v1++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "UpperBound":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v2 := 0
				for !in.IsDelim(']') {
					if v2 < 2 {
						out.UpperBound[v2] = float64(in.Float64())
						v2++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC321af92EncodeGithubComBytearenaBytearenaCommonUtilsVector(out *jwriter.Writer, in AABB) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"LowerBound\":")
	out.RawByte('[')
	for v3 := range in.LowerBound {
		if v3 > 0 {
			out.RawByte(',')
		}
		out.Float64(float64(in.LowerBound[v3]))
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"UpperBound\":")
	out.RawByte('[')
	for v4 := range in.UpperBound {
		if v4 > 0 {
			out.RawByte(',')
		}
		out.Float64(float64(in.UpperBound[v4]))
	}
	out.RawByte(']')
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AABB) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC321af92EncodeGithubComBytearenaBytearenaCommonUtilsVector(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AABB) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC321af92EncodeGithubComBytearenaBytearenaCommonUtilsVector(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AABB) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC321af92DecodeGithubComBytearenaBytearenaCommonUtilsVector(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AABB) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC321af92DecodeGithubComBytearenaBytearenaCommonUtilsVector(l, v)
}
