// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC58bb315DecodeGithubComBytearenaBytearenaCommonTypes(in *jlexer.Lexer, out *MQMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "host":
			out.Host = string(in.String())
		case "app":
			out.App = string(in.String())
		case "file":
			out.File = string(in.String())
		case "line":
			out.Line = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				if out.Payload == nil {
					out.Payload = new(MQPayload)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Payload = make(MQPayload)
					} else {
						*out.Payload = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v1 interface{}
						if m, ok := v1.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v1.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v1 = in.Interface()
						}
						(*out.Payload)[key] = v1
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "error":
			out.IsError = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC58bb315EncodeGithubComBytearenaBytearenaCommonTypes(out *jwriter.Writer, in MQMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"date\":")
	out.Raw((in.Date).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"host\":")
	out.String(string(in.Host))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"app\":")
	out.String(string(in.App))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"file\":")
	out.String(string(in.File))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"line\":")
	out.Int(int(in.Line))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message\":")
	out.String(string(in.Message))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"payload\":")
	if in.Payload == nil {
		out.RawString("null")
	} else {
		if *in.Payload == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range *in.Payload {
				if !v2First {
					out.RawByte(',')
				}
				v2First = false
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"error\":")
	out.Bool(bool(in.IsError))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MQMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC58bb315EncodeGithubComBytearenaBytearenaCommonTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MQMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC58bb315EncodeGithubComBytearenaBytearenaCommonTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MQMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC58bb315DecodeGithubComBytearenaBytearenaCommonTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MQMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC58bb315DecodeGithubComBytearenaBytearenaCommonTypes(l, v)
}
