// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson54cb076dDecodeGithubComBytearenaBytearenaCommonTypes(in *jlexer.Lexer, out *VizMessagePlayerScore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Value":
			out.Value = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54cb076dEncodeGithubComBytearenaBytearenaCommonTypes(out *jwriter.Writer, in VizMessagePlayerScore) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Value\":")
	out.Int(int(in.Value))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VizMessagePlayerScore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54cb076dEncodeGithubComBytearenaBytearenaCommonTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VizMessagePlayerScore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54cb076dEncodeGithubComBytearenaBytearenaCommonTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VizMessagePlayerScore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54cb076dDecodeGithubComBytearenaBytearenaCommonTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VizMessagePlayerScore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54cb076dDecodeGithubComBytearenaBytearenaCommonTypes(l, v)
}
func easyjson54cb076dDecodeGithubComBytearenaBytearenaCommonTypes1(in *jlexer.Lexer, out *VizMessageObject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Position":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v1 := 0
				for !in.IsDelim(']') {
					if v1 < 2 {
						out.Position[v1] = float64(in.Float64())
						v1++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Velocity":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v2 := 0
				for !in.IsDelim(']') {
					if v2 < 2 {
						out.Velocity[v2] = float64(in.Float64())
						v2++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Radius":
			out.Radius = float64(in.Float64())
		case "Orientation":
			out.Orientation = float64(in.Float64())
		case "PlayerInfo":
			if in.IsNull() {
				in.Skip()
				out.PlayerInfo = nil
			} else {
				if out.PlayerInfo == nil {
					out.PlayerInfo = new(PlayerInfo)
				}
				(*out.PlayerInfo).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54cb076dEncodeGithubComBytearenaBytearenaCommonTypes1(out *jwriter.Writer, in VizMessageObject) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Id\":")
	out.String(string(in.Id))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Position\":")
	out.RawByte('[')
	for v3 := range in.Position {
		if v3 > 0 {
			out.RawByte(',')
		}
		out.Float64(float64(in.Position[v3]))
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Velocity\":")
	out.RawByte('[')
	for v4 := range in.Velocity {
		if v4 > 0 {
			out.RawByte(',')
		}
		out.Float64(float64(in.Velocity[v4]))
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Radius\":")
	out.Float64(float64(in.Radius))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Orientation\":")
	out.Float64(float64(in.Orientation))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PlayerInfo\":")
	if in.PlayerInfo == nil {
		out.RawString("null")
	} else {
		(*in.PlayerInfo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VizMessageObject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54cb076dEncodeGithubComBytearenaBytearenaCommonTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VizMessageObject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54cb076dEncodeGithubComBytearenaBytearenaCommonTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VizMessageObject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54cb076dDecodeGithubComBytearenaBytearenaCommonTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VizMessageObject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54cb076dDecodeGithubComBytearenaBytearenaCommonTypes1(l, v)
}
func easyjson54cb076dDecodeGithubComBytearenaBytearenaCommonTypes2(in *jlexer.Lexer, out *VizMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GameID":
			out.GameID = string(in.String())
		case "Objects":
			if in.IsNull() {
				in.Skip()
				out.Objects = nil
			} else {
				in.Delim('[')
				if out.Objects == nil {
					if !in.IsDelim(']') {
						out.Objects = make([]VizMessageObject, 0, 1)
					} else {
						out.Objects = []VizMessageObject{}
					}
				} else {
					out.Objects = (out.Objects)[:0]
				}
				for !in.IsDelim(']') {
					var v5 VizMessageObject
					(v5).UnmarshalEasyJSON(in)
					out.Objects = append(out.Objects, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DebugPoints":
			if in.IsNull() {
				in.Skip()
				out.DebugPoints = nil
			} else {
				in.Delim('[')
				if out.DebugPoints == nil {
					if !in.IsDelim(']') {
						out.DebugPoints = make([][2]float64, 0, 4)
					} else {
						out.DebugPoints = [][2]float64{}
					}
				} else {
					out.DebugPoints = (out.DebugPoints)[:0]
				}
				for !in.IsDelim(']') {
					var v6 [2]float64
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v7 := 0
						for !in.IsDelim(']') {
							if v7 < 2 {
								v6[v7] = float64(in.Float64())
								v7++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.DebugPoints = append(out.DebugPoints, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DebugSegments":
			if in.IsNull() {
				in.Skip()
				out.DebugSegments = nil
			} else {
				in.Delim('[')
				if out.DebugSegments == nil {
					if !in.IsDelim(']') {
						out.DebugSegments = make([][2][2]float64, 0, 2)
					} else {
						out.DebugSegments = [][2][2]float64{}
					}
				} else {
					out.DebugSegments = (out.DebugSegments)[:0]
				}
				for !in.IsDelim(']') {
					var v8 [2][2]float64
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v9 := 0
						for !in.IsDelim(']') {
							if v9 < 2 {
								if in.IsNull() {
									in.Skip()
								} else {
									in.Delim('[')
									v10 := 0
									for !in.IsDelim(']') {
										if v10 < 2 {
											v8[v9][v10] = float64(in.Float64())
											v10++
										} else {
											in.SkipRecursive()
										}
										in.WantComma()
									}
									in.Delim(']')
								}
								v9++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.DebugSegments = append(out.DebugSegments, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54cb076dEncodeGithubComBytearenaBytearenaCommonTypes2(out *jwriter.Writer, in VizMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"GameID\":")
	out.String(string(in.GameID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Objects\":")
	if in.Objects == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in.Objects {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DebugPoints\":")
	if in.DebugPoints == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v13, v14 := range in.DebugPoints {
			if v13 > 0 {
				out.RawByte(',')
			}
			out.RawByte('[')
			for v15 := range v14 {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v14[v15]))
			}
			out.RawByte(']')
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DebugSegments\":")
	if in.DebugSegments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v16, v17 := range in.DebugSegments {
			if v16 > 0 {
				out.RawByte(',')
			}
			out.RawByte('[')
			for v18 := range v17 {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v19 := range v17[v18] {
					if v19 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64(v17[v18][v19]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VizMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54cb076dEncodeGithubComBytearenaBytearenaCommonTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VizMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54cb076dEncodeGithubComBytearenaBytearenaCommonTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VizMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54cb076dDecodeGithubComBytearenaBytearenaCommonTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VizMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54cb076dDecodeGithubComBytearenaBytearenaCommonTypes2(l, v)
}
func easyjson54cb076dDecodeGithubComBytearenaBytearenaCommonTypes3(in *jlexer.Lexer, out *PlayerInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IsAlive":
			out.IsAlive = bool(in.Bool())
		case "PlayerId":
			out.PlayerId = string(in.String())
		case "PlayerName":
			out.PlayerName = string(in.String())
		case "Score":
			(out.Score).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54cb076dEncodeGithubComBytearenaBytearenaCommonTypes3(out *jwriter.Writer, in PlayerInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"IsAlive\":")
	out.Bool(bool(in.IsAlive))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PlayerId\":")
	out.String(string(in.PlayerId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PlayerName\":")
	out.String(string(in.PlayerName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Score\":")
	(in.Score).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlayerInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54cb076dEncodeGithubComBytearenaBytearenaCommonTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayerInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54cb076dEncodeGithubComBytearenaBytearenaCommonTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlayerInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54cb076dDecodeGithubComBytearenaBytearenaCommonTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayerInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54cb076dDecodeGithubComBytearenaBytearenaCommonTypes3(l, v)
}
