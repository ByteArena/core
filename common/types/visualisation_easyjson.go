// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes(in *jlexer.Lexer, out *VizMessagePlayerScore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Value":
			out.Value = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes(out *jwriter.Writer, in VizMessagePlayerScore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VizMessagePlayerScore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VizMessagePlayerScore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VizMessagePlayerScore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VizMessagePlayerScore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes(l, v)
}
func easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes1(in *jlexer.Lexer, out *VizMessageObject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Position":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v1 := 0
				for !in.IsDelim(']') {
					if v1 < 2 {
						out.Position[v1] = float64(in.Float64())
						v1++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Velocity":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v2 := 0
				for !in.IsDelim(']') {
					if v2 < 2 {
						out.Velocity[v2] = float64(in.Float64())
						v2++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Radius":
			out.Radius = float64(in.Float64())
		case "Orientation":
			out.Orientation = float64(in.Float64())
		case "PlayerInfo":
			if in.IsNull() {
				in.Skip()
				out.PlayerInfo = nil
			} else {
				if out.PlayerInfo == nil {
					out.PlayerInfo = new(PlayerInfo)
				}
				(*out.PlayerInfo).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes1(out *jwriter.Writer, in VizMessageObject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawByte('[')
		for v3 := range in.Position {
			if v3 > 0 {
				out.RawByte(',')
			}
			out.Float64(float64(in.Position[v3]))
		}
		out.RawByte(']')
	}
	{
		const prefix string = ",\"Velocity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawByte('[')
		for v4 := range in.Velocity {
			if v4 > 0 {
				out.RawByte(',')
			}
			out.Float64(float64(in.Velocity[v4]))
		}
		out.RawByte(']')
	}
	{
		const prefix string = ",\"Radius\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Radius))
	}
	{
		const prefix string = ",\"Orientation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Orientation))
	}
	{
		const prefix string = ",\"PlayerInfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PlayerInfo == nil {
			out.RawString("null")
		} else {
			(*in.PlayerInfo).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VizMessageObject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VizMessageObject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VizMessageObject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VizMessageObject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes1(l, v)
}
func easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes2(in *jlexer.Lexer, out *VizMessageEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Subject":
			out.Subject = string(in.String())
		case "Payload":
			if m, ok := out.Payload.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Payload.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Payload = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes2(out *jwriter.Writer, in VizMessageEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Subject\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subject))
	}
	{
		const prefix string = ",\"Payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Payload.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Payload.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Payload))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VizMessageEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VizMessageEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VizMessageEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VizMessageEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes2(l, v)
}
func easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes3(in *jlexer.Lexer, out *VizMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GameID":
			out.GameID = string(in.String())
		case "Objects":
			if in.IsNull() {
				in.Skip()
				out.Objects = nil
			} else {
				in.Delim('[')
				if out.Objects == nil {
					if !in.IsDelim(']') {
						out.Objects = make([]VizMessageObject, 0, 1)
					} else {
						out.Objects = []VizMessageObject{}
					}
				} else {
					out.Objects = (out.Objects)[:0]
				}
				for !in.IsDelim(']') {
					var v5 VizMessageObject
					(v5).UnmarshalEasyJSON(in)
					out.Objects = append(out.Objects, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DebugPoints":
			if in.IsNull() {
				in.Skip()
				out.DebugPoints = nil
			} else {
				in.Delim('[')
				if out.DebugPoints == nil {
					if !in.IsDelim(']') {
						out.DebugPoints = make([][2]float64, 0, 4)
					} else {
						out.DebugPoints = [][2]float64{}
					}
				} else {
					out.DebugPoints = (out.DebugPoints)[:0]
				}
				for !in.IsDelim(']') {
					var v6 [2]float64
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v7 := 0
						for !in.IsDelim(']') {
							if v7 < 2 {
								v6[v7] = float64(in.Float64())
								v7++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.DebugPoints = append(out.DebugPoints, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DebugSegments":
			if in.IsNull() {
				in.Skip()
				out.DebugSegments = nil
			} else {
				in.Delim('[')
				if out.DebugSegments == nil {
					if !in.IsDelim(']') {
						out.DebugSegments = make([][2][2]float64, 0, 2)
					} else {
						out.DebugSegments = [][2][2]float64{}
					}
				} else {
					out.DebugSegments = (out.DebugSegments)[:0]
				}
				for !in.IsDelim(']') {
					var v8 [2][2]float64
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v9 := 0
						for !in.IsDelim(']') {
							if v9 < 2 {
								if in.IsNull() {
									in.Skip()
								} else {
									in.Delim('[')
									v10 := 0
									for !in.IsDelim(']') {
										if v10 < 2 {
											v8[v9][v10] = float64(in.Float64())
											v10++
										} else {
											in.SkipRecursive()
										}
										in.WantComma()
									}
									in.Delim(']')
								}
								v9++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.DebugSegments = append(out.DebugSegments, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]VizMessageEvent, 0, 2)
					} else {
						out.Events = []VizMessageEvent{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v11 VizMessageEvent
					(v11).UnmarshalEasyJSON(in)
					out.Events = append(out.Events, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes3(out *jwriter.Writer, in VizMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"GameID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GameID))
	}
	{
		const prefix string = ",\"Objects\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Objects == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Objects {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DebugPoints\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DebugPoints == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.DebugPoints {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v16 := range v15 {
					if v16 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64(v15[v16]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DebugSegments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DebugSegments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.DebugSegments {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v19 := range v18 {
					if v19 > 0 {
						out.RawByte(',')
					}
					out.RawByte('[')
					for v20 := range v18[v19] {
						if v20 > 0 {
							out.RawByte(',')
						}
						out.Float64(float64(v18[v19][v20]))
					}
					out.RawByte(']')
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Events\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Events {
				if v21 > 0 {
					out.RawByte(',')
				}
				(v22).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VizMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VizMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VizMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VizMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes3(l, v)
}
func easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes4(in *jlexer.Lexer, out *PlayerInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IsAlive":
			out.IsAlive = bool(in.Bool())
		case "PlayerId":
			out.PlayerId = string(in.String())
		case "PlayerName":
			out.PlayerName = string(in.String())
		case "Score":
			(out.Score).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes4(out *jwriter.Writer, in PlayerInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IsAlive\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsAlive))
	}
	{
		const prefix string = ",\"PlayerId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PlayerId))
	}
	{
		const prefix string = ",\"PlayerName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PlayerName))
	}
	{
		const prefix string = ",\"Score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Score).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlayerInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayerInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54cb076dEncodeGithubComBytearenaCoreCommonTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlayerInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayerInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54cb076dDecodeGithubComBytearenaCoreCommonTypes4(l, v)
}
